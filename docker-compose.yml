version: '3.8'

services:

  client-backend:
    image: client:0.0.1
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8181:8181"
    depends_on:
      - postgresdb
      - redis
      - kafka
    environment:
      - SERVER_PORT= 8181
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgresdb/bank_service_db
      - SPRING_DATASOURCE_USERNAME=zhenya
      - SPRING_DATASOURCE_PASSWORD=qwerty123
      - SPRING_REDIS_HOST=redis
      - SPRING_REDIS_PORT=6379
      - SPRING_REDIS_PASSWORD=cXdlcnR5MTIz
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    networks:
      - my_network

  postgresdb:
    image: postgres:14-alpine3.14
    container_name: bank_service_db
    ports:
      - 15432:5432
    environment:
      POSTGRES_USER: zhenya
      POSTGRES_PASSWORD: qwerty123
      POSTGRES_DB: bank_service_db
    volumes:
      - ./infrastructure/db/create_db.sql:/docker-entrypoint-initdb.d/create_db.sql
    networks:
      - my_network

  redis:
    image: redis:7.2-rc-alpine
    restart: always
    container_name: redis
    ports:
      - '6379:6379'
    command: redis-server --save 20 1 --loglevel warning --requirepass cXdlcnR5MTIz
    volumes:
      - cache:/data
    networks:
      - my_network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.4
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 22181:2181
    networks:
      - my_network

  kafka:
    image: confluentinc/cp-kafka:7.4.4
    depends_on:
      - zookeeper
    ports:
      - 29092:29092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - my_network

volumes:
  cache:

networks:
  my_network:
    driver: bridge
